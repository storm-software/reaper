# Documentation and mdbook related jobs.

name: Docs

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  merge_group:

jobs:
  lint:
    name: Lint docs
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}

      - uses: actions/checkout@v4
        name: Checkout `main` branch
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}

      - name: Setup workspace
        uses: ./.github/actions/setup
        with:
          storm_bot_private_key: ${{ secrets.STORM_BOT_PRIVATE_KEY }}
          storm_bot_passphrase: ${{ secrets.STORM_BOT_PASSPHRASE }}

      - name: Install mdbook-linkcheck with asdf
        run: |
          asdf install mdbook-linkcheck
        shell: bash

      # - name: Install mdbook-linkcheck
      #   run: |
      #     mkdir mdbook-linkcheck
      #     curl -sSL -o mdbook-linkcheck.zip https://github.com/Michael-F-Bryan/mdbook-linkcheck/releases/latest/download/mdbook-linkcheck.x86_64-unknown-linux-gnu.zip
      #     unzip mdbook-linkcheck.zip -d ./mdbook-linkcheck
      #     chmod +x $(pwd)/mdbook-linkcheck/mdbook-linkcheck
      #     echo $(pwd)/mdbook-linkcheck >> $GITHUB_PATH

      - name: Run linkcheck
        run: pnpm nx run docs-book:lint

  build:
    name: Build docs
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}

      - uses: actions/checkout@v4
        name: Checkout `main` branch
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}

      - name: Setup workspace
        uses: ./.github/actions/setup
        with:
          storm_bot_private_key: ${{ secrets.STORM_BOT_PRIVATE_KEY }}
          storm_bot_passphrase: ${{ secrets.STORM_BOT_PASSPHRASE }}

      - run: git config --global url."https://x-access-token:${{ secrets.STORM_BOT_GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
        shell: bash
      - run: git config --global url."https://${{ secrets.STORM_BOT_GITHUB_TOKEN }}@github.com/".insteadOf "git@github.com:"
        shell: bash

      - name: Install mdbook with asdf
        run: |
          asdf install mdbook
        shell: bash

      - name: Install mdbook-template
        run: |
          mkdir mdbook-template
          curl -sSL https://github.com/sgoudham/mdbook-template/releases/latest/download/mdbook-template-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook-template
          echo $(pwd)/mdbook-template >> $GITHUB_PATH

      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main
          error-on-no-successful-workflow: false
          set-environment-variables-for-job: true

      - name: Build book
        run: |
          pnpm nx run docs-book:build

      - name: Build docs
        run: pnpm nx affected --targets=docs --nxBail --configuration=production --exclude=@reaper/monorepo,docs-* --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
        env:
          RUSTDOCFLAGS:
            --cfg docsrs --show-type-layout --generate-link-to-definition --enable-index-page
            -Zunstable-options

      - name: Move docs to book folder
        run: |
          mv dist/docs/crates dist/docs/book

      - name: Archive artifact
        shell: sh
        run: |
          chmod -c -R +rX "dist/docs/book" |
          while read line; do
             echo "::warning title=Invalid file permissions automatically fixed::$line"
          done
          tar \
            --dereference --hard-dereference \
            --directory "dist/docs/book" \
            -cvf "$RUNNER_TEMP/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: book-artifact
          path: ${{ runner.temp }}/artifact.tar
          retention-days: 1
          if-no-files-found: error

  deploy:
    name: Deploy docs
    if: github.ref_name == 'main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs:
      - lint
      - build
    timeout-minutes: 60
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: book-artifact
