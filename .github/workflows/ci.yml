name: CI/CD

on:
  workflow_dispatch:
    inputs:
      tag:
        description: override release tag
        required: false
  push:
    branches:
      - main

env:
  NX_BASE: ${{ github.event.before }}
  NX_HEAD: ${{ github.sha }}

jobs:
  start:
    name: Started CI workflow
    if: github.repository == 'storm-software/reaper' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification - Deployment started
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "notifications"
          payload: |
            {
               "text": "Deployment for ${{ github.repository }} has started (In Progress)",
               "attachments": [
                 {
                   "pretext": "Deployment for ${{ github.repository }} has started",
                   "color": "1fb2a6",
                   "fields": [
                     {
                       "title": "Status",
                       "short": true,
                       "value": "In Progress"
                     }
                   ]
                 }
               ]
             }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.STORM_BOT_SLACK_TOKEN }}
      - name: Send Discord notification - Deployment started
        uses: Ilshidur/action-discord@master
        with:
          args: "Deployment for ${{ github.repository }} has started - #${{
            github.run_number }}"
        env:
          DISCORD_WEBHOOK: ${{ secrets.STORM_BOT_DISCORD_WEBHOOK }}
          DISCORD_USERNAME: ${{ env.STORM_BOT }}
          DISCORD_AVATAR: "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-stormie.png"
          DISCORD_EMBEDS:
            '[{"title": "Deployment #${{ github.run_number }} has started",
            "description": "Deployment for ${{ github.repository }} is currently
            in process - #${{ github.run_number }}", "thumbnail": { "url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-fill.png"
            }, "image": { "url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/logo-fill.png"
            }, "author": { "name": "${{ github.actor }}", "url":
            "https://github.com/${{ github.actor }}", "icon_url":
            "https://avatars.githubusercontent.com/u/${{ github.actor_id }}?v=4"
            }, "fields": [ { "name": "Repository", "value": "${{
            github.repository }}" }, { "name": "Repository URL", "value": "${{
            github.repositoryUrl }}" }, { "name": "Pipeline Status", "value":
            "In Progress" }], "color": 2077350, "timestamp": "${{
            github.event.repository.updated_at }}", "url": "${{
            github.event.pull_request.html_url || github.event.head_commit.url
            }}", "footer": { "text": "Click here to see the full workflow
            details: ${{ github.event.pull_request.html_url ||
            github.event.head_commit.url }}", "icon_url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-fill.png"
            } }]'
      - name: Send Telegram notification - Deployment started
        uses: storm-software/action-telegram-notify@main
        with:
          status: "in-progress"
        env:
          TELEGRAM_TOKEN: ${{ secrets.STORM_BOT_TELEGRAM_TOKEN }}
          TELEGRAM_CHAT: ${{ secrets.STORM_BOT_TELEGRAM_NOTIFICATION_CHAT }}

  setup:
    name: Setup workspace
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && github.event.pull_request.draft == false
    needs:
      - start
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      actions: read
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        name: Checkout `main` branch
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - name: Setup workspace
        uses: ./.github/actions/setup
        with:
          storm_bot_private_key: ${{ secrets.STORM_BOT_PRIVATE_KEY }}
          storm_bot_passphrase: ${{ secrets.STORM_BOT_PASSPHRASE }}

  lint:
    name: Lint workspace
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && github.event.pull_request.draft == false
    needs:
      - start
      - setup
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      actions: read
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        name: Checkout `main` branch
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - name: Setup workspace
        uses: ./.github/actions/setup
        with:
          storm_bot_private_key: ${{ secrets.STORM_BOT_PRIVATE_KEY }}
          storm_bot_passphrase: ${{ secrets.STORM_BOT_PASSPHRASE }}
      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main
          error-on-no-successful-workflow: false
          set-environment-variables-for-job: true
      - name: Run lint-ls
        run: pnpm exec ls-lint --config="./node_modules/@storm-software/linting-tools/ls-lint/.ls-lint.yml"
        shell: bash
      - name: Run storm-lint
        run: pnpm exec storm-lint all --skip-cspell --skip-alex
        shell: bash
      # - name: Run taplo
      #   run: pnpm exec taplo format --check --config="./node_modules/@storm-software/linting-tools/taplo/.taplo.toml"
      #   shell: bash
      # - name: Run lint task for affected projects
      #   run: pnpm nx-cloud record -- nx affected --targets=lint --configuration=production --exclude=@reaper/monorepo,docs-* --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
      #   shell: bash

  lint-docs:
    name: Lint documentation
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && github.event.pull_request.draft == false
    needs:
      - start
      - setup
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        name: Checkout `main` branch
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - name: Setup workspace
        uses: ./.github/actions/setup
        with:
          storm_bot_private_key: ${{ secrets.STORM_BOT_PRIVATE_KEY }}
          storm_bot_passphrase: ${{ secrets.STORM_BOT_PASSPHRASE }}
      - name: Install mdbook-linkcheck with asdf
        run: |
          asdf install mdbook-linkcheck
        shell: bash
      - name: Run linkcheck
        run: pnpm nx run docs-book:lint

  build:
    name: Build workspace
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && github.event.pull_request.draft == false
    needs:
      - start
      - setup
    runs-on: ubuntu-latest-m
    timeout-minutes: 45
    permissions:
      actions: read
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        name: Checkout `main` branch
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - name: Setup workspace
        uses: ./.github/actions/setup
        with:
          storm_bot_private_key: ${{ secrets.STORM_BOT_PRIVATE_KEY }}
          storm_bot_passphrase: ${{ secrets.STORM_BOT_PASSPHRASE }}
      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main
          error-on-no-successful-workflow: false
          set-environment-variables-for-job: true
      # - name: Run build libmdbx lib
      #   run: cargo +nightly build --profile prod -p reaper-eth-engine-libmdbx --target-dir dist/target/crates/eth-engine-libmdbx
      #   shell: bash
      #   env:
      #     RUST_FLAGS: -Z unstable-options -D warnings
      - name: Run build
        run: pnpm nx-cloud record -- nx run-many --targets=build --nxBail --configuration=production --projects=reaper-eth-engine,reaper-eth-order-telegram-bot
        shell: bash
        env:
          RUST_FLAGS: -D warnings -Z unstable-options

  build-docs:
    name: Build documentation
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && github.event.pull_request.draft == false
    needs:
      - start
      - setup
      - lint
      - lint-docs
      - build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        name: Checkout `main` branch
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - name: Setup workspace
        uses: ./.github/actions/setup
        with:
          storm_bot_private_key: ${{ secrets.STORM_BOT_PRIVATE_KEY }}
          storm_bot_passphrase: ${{ secrets.STORM_BOT_PASSPHRASE }}
      - name: Setup global URLs - Part 1
        run: git config --global url."https://x-access-token:${{ secrets.STORM_BOT_GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
        shell: bash
      - name: Setup global URLs - Part 2
        run: git config --global url."https://${{ secrets.STORM_BOT_GITHUB_TOKEN }}@github.com/".insteadOf "git@github.com:"
        shell: bash
      - name: Install mdbook with asdf
        run: asdf install mdbook
        shell: bash
      - name: Install mdbook-template
        run: |
          mkdir mdbook-template
          curl -sSL https://github.com/sgoudham/mdbook-template/releases/latest/download/mdbook-template-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook-template
          echo $(pwd)/mdbook-template >> $GITHUB_PATH
      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main
          error-on-no-successful-workflow: false
          set-environment-variables-for-job: true
      - name: Build book
        run: pnpm nx-cloud record -- nx run docs-book:build
        env:
          RUST_FLAGS: -D warnings -Z unstable-options
      - name: Build docs
        run: pnpm nx-cloud record -- nx affected --targets=docs --nxBail --configuration=production --exclude=@reaper/monorepo,reaper-eth-engine,reaper-eth-order-fill-service,reaper-eth-order-telegram-bot,docs-* --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
        env:
          RUSTDOCFLAGS:
            --cfg docsrs --show-type-layout --generate-link-to-definition --enable-index-page
            -Zunstable-options
      - name: Move docs to book folder
        run: mv dist/docs/crates dist/docs/book
      - name: Archive artifact
        shell: sh
        run: |
          chmod -c -R +rX "dist/docs/book" |
          while read line; do
             echo "::warning title=Invalid file permissions automatically fixed::$line"
          done
          tar \
            --dereference --hard-dereference \
            --directory "dist/docs/book" \
            -cvf "$RUNNER_TEMP/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: book-artifact
          path: ${{ runner.temp }}/artifact.tar
          retention-days: 1
          if-no-files-found: error

  analyze:
    name: Analyze
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && github.event.pull_request.draft == false
    needs:
      - start
      - setup
      - lint
      - build
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: true
      matrix:
        language: ["javascript"]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
    steps:
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        name: Checkout [Default Branch]
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - name: Setup workspace
        uses: ./.github/actions/setup
        with:
          storm_bot_private_key: ${{ secrets.STORM_BOT_PRIVATE_KEY }}
          storm_bot_passphrase: ${{ secrets.STORM_BOT_PASSPHRASE }}

      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main
          error-on-no-successful-workflow: false
          set-environment-variables-for-job: true

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Run build
        run: pnpm nx-cloud record -- nx run-many --targets=build --nxBail --configuration=production --projects=reaper-eth-engine,reaper-eth-order-telegram-bot
        shell: bash
        env:
          RUST_FLAGS: -D warnings -Z unstable-options
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  deploy-docs:
    name: Deploy documentation
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && github.event.pull_request.draft == false
    needs:
      - start
      - setup
      - lint-docs
      - build-docs
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: book-artifact

  release:
    name: Release workspace
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && github.event.pull_request.draft == false
    needs:
      - start
      - setup
      - lint
      - build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      actions: read
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        name: Checkout `main` branch
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
      - name: Setup workspace
        uses: ./.github/actions/setup
        with:
          storm_bot_private_key: ${{ secrets.STORM_BOT_PRIVATE_KEY }}
          storm_bot_passphrase: ${{ secrets.STORM_BOT_PASSPHRASE }}
      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main
          error-on-no-successful-workflow: false
          set-environment-variables-for-job: true

      - name: Run build
        run: pnpm nx-cloud record -- nx run-many --targets=build --nxBail --configuration=production --projects=reaper-eth-engine,reaper-eth-order-telegram-bot
        shell: bash
        env:
          RUST_FLAGS: -D warnings -Z unstable-options

      - name: List build
        run: ls dist/target -R
        shell: bash

      # - name: Configure AWS credentials
      #   if: steps.list.outputs.stdout
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-region: ${{ env.AWS_REGION }}
      #     role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github
      #   env:
      #     AWS_REGION: us-east-1
      #     AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}

      # - name: Verify AWS credentials
      #   if: steps.list.outputs.stdout
      #   run: aws sts get-caller-identity

      - name: Install OpenTofu and Terragrunt with asdf
        run: |
          asdf install opentofu
          asdf install terragrunt
        shell: bash

      # - name: Check terragrunt HCL
      #   uses: gruntwork-io/terragrunt-action@v2
      #   with:
      #     tofu_version: 1.8
      #     tg_version: 0.63.6
      #     tg_dir: deployment/prod/eth-execution-lambda
      #     tg_command: "hclfmt --terragrunt-check --terragrunt-diff"

      # Initialize a new or existing Terragrunt working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terragrunt Init
        run: terragrunt init --terragrunt-non-interactive --terragrunt-working-dir deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.STORM_BOT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STORM_BOT_AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
          TF_LOG: debug

      - name: Terragrunt Plan
        run: terragrunt run-all plan --terragrunt-non-interactive --terragrunt-working-dir deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.STORM_BOT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STORM_BOT_AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
          TF_LOG: debug

      - name: Terragrunt Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terragrunt run-all apply --terragrunt-non-interactive --terragrunt-working-dir deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.STORM_BOT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STORM_BOT_AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
          TF_LOG: debug

      # - name: Release Library Version Updates
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: pnpm release --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
      #   env:
      #     GITHUB_ACTOR: ${{ github.actor }}
      #     GITHUB_TOKEN: ${{ github.token }}
      #     GH_TOKEN: ${{ github.token }}
      #     NPM_TOKEN: ${{ secrets.STORM_BOT_NPM_TOKEN }}
      #     CARGO_REGISTRY_TOKEN: ${{ secrets.STORM_BOT_CARGO_TOKEN }}
      #     STORM_BOT: Stormie-Bot
      #     STORM_WORKSPACE_ROOT: ${{ github.workspace }}
      #     STORM_REPOSITORY: ${{ github.repositoryUrl }}
      #     TAG: ${{ inputs.tag }}

  success:
    needs:
      - start
      - setup
      - lint
      - lint-docs
      - build
      - build-docs
      - release
      - deploy-docs
      - analyze
    if: ${{ success() }}
    name: Send success notification
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification - Deployment successful
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "notifications"
          update-ts: ${{ steps.release.outputs.ts }}
          payload: |
            {
              "text": "Deployment for ${{ github.repository }} has finished (Completed) \n\nPipeline Status: Success \nClick here to see the full workflow details: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "attachments": [
                {
                  "pretext": "Deployment for ${{ github.repository }} has finished successfully",
                  "color": "087f5b",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Completed"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.STORM_BOT_SLACK_TOKEN }}

      - name: Send Discord notification - Deployment successful
        uses: Ilshidur/action-discord@master
        with:
          args: "Deployment for ${{ github.repository }} finished successfully -
            #${{ github.run_number }}"
        env:
          DISCORD_WEBHOOK: ${{ secrets.STORM_BOT_DISCORD_WEBHOOK }}
          DISCORD_USERNAME: ${{ env.STORM_BOT }}
          DISCORD_AVATAR: "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-stormie.png"
          DISCORD_EMBEDS:
            '[{"title": "Deployment #${{ github.run_number }} was successful!",
            "description": "Deployment for ${{ github.repository }} has finished
            successfully - #${{ github.run_number }}", "thumbnail": { "url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-fill.png"
            }, "image": { "url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/logo-fill.png"
            }, "author": { "name": "${{ github.actor }}", "url":
            "https://github.com/${{ github.actor }}", "icon_url":
            "https://avatars.githubusercontent.com/u/${{ github.actor_id }}?v=4"
            }, "fields": [ { "name": "Repository", "value": "${{
            github.repository }}" }, { "name": "Repository URL", "value": "${{
            github.repositoryUrl }}" }, { "name": "Pipeline Status", "value":
            "Success" }], "color": 556891, "timestamp": "${{
            github.event.repository.updated_at }}", "url": "${{
            github.event.pull_request.html_url || github.event.head_commit.url
            }}", "footer": { "text": "Click here to see the full workflow
            details: ${{ github.event.pull_request.html_url ||
            github.event.head_commit.url }}", "icon_url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-fill.png"
            }}]'

      - name: Send Telegram notification - Deployment successful
        uses: storm-software/action-telegram-notify@main
        with:
          status: "success"
        env:
          TELEGRAM_TOKEN: ${{ secrets.STORM_BOT_TELEGRAM_TOKEN }}
          TELEGRAM_CHAT: ${{ secrets.STORM_BOT_TELEGRAM_NOTIFICATION_CHAT }}

  failure:
    needs:
      - start
      - setup
      - lint
      - lint-docs
      - build
      - build-docs
      - release
      - deploy-docs
      - analyze
    if: ${{ failure() }}
    name: Send failure notification
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification - Deployment failed
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "notifications"
          update-ts: ${{ steps.release.outputs.ts }}
          payload: |
            {
              "text": "Deployment for ${{ github.repository }} has finished (Failure) \n\nPipeline Status: Failure\nError: ${{ job.conclusion }}\nReason: ${{ job.cancelled }}\nConclusion: ${{ job.conclusion }}\nOutput: ${{ job.output }}\nLogs: ${{ job.logs }} \nSteps: ${{ job.steps }} \nActions: ${{ job.actions }} \nServices: ${{ job.services }} \nEnvironment: ${{ job.environment}} \nClick here to see the full workflow details: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "attachments": [
                {
                  "pretext": "Deployment for ${{ github.repository }} has finished with failures",
                  "color": "990000",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Failure"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.STORM_BOT_SLACK_TOKEN }}
      - name: Send Discord notification - Deployment failed
        uses: Ilshidur/action-discord@master
        with:
          args:
            "Deployment for ${{ github.repository }} finished with failures -
            #${{ github.run_number }}"
        env:
          DISCORD_WEBHOOK: ${{ secrets.STORM_BOT_DISCORD_WEBHOOK }}
          DISCORD_USERNAME: ${{ env.STORM_BOT }}
          DISCORD_AVATAR: "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-stormie.png"
          DISCORD_EMBEDS:
            '[{"title": "Deployment #${{ github.run_number }} has failed",
            "description": "Deployment for ${{ github.repository }} finished
            with failures - #${{ github.run_number }}", "thumbnail": { "url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-fill.png"
            }, "image": { "url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/logo-fill.png"
            }, "author": { "name": "${{ github.actor }}", "url":
            "https://github.com/${{ github.actor }}", "icon_url":
            "https://avatars.githubusercontent.com/u/${{ github.actor_id }}?v=4"
            }, "fields": [ { "name": "Repository", "value": "${{
            github.repository }}" }, { "name": "Repository URL", "value": "${{
            github.repositoryUrl }}" }, { "name": "Pipeline Status", "value":
            "Failure" }, { "name": "Event", "value": "${{ github.event_name }}"
            }, { "name": "Result", "value": "${{ steps.release.result }}" }, {
            "name": "Conclusion", "value": "${{ steps.release.conclusion }}" },
            { "name": "Output", "value": "${{ toJSON(steps.release.outputs) }}"
            }], "color": 10027008, "timestamp": "${{
            github.event.repository.updated_at }}", "url": "${{
            github.event.pull_request.html_url || github.event.head_commit.url
            }}", "footer": { "text": "Click here to see the full workflow
            details: ${{ github.event.pull_request.html_url ||
            github.event.head_commit.url }}", "icon_url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-fill.png"
            } }]'
      - name: Send Telegram notification - Deployment failed
        uses: storm-software/action-telegram-notify@main
        with:
          status: "failed"
        env:
          TELEGRAM_TOKEN: ${{ secrets.STORM_BOT_TELEGRAM_TOKEN }}
          TELEGRAM_CHAT: ${{ secrets.STORM_BOT_TELEGRAM_NOTIFICATION_CHAT }}

  cancelled:
    needs:
      - start
      - setup
      - lint
      - lint-docs
      - build
      - build-docs
      - release
      - deploy-docs
      - analyze
    if: ${{ cancelled() }}
    name: Send cancelled notification
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification - Deployment cancelled
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "notifications"
          update-ts: ${{ steps.release.outputs.ts }}
          payload: |
            {
              "text": "Deployment for ${{ github.repository }} has finished (Cancelled) \n\nPipeline Status: Cancelled\nError: ${{ job.conclusion }}\nReason: ${{ job.cancelled }}\nConclusion: ${{ job.conclusion }}\nOutput: ${{ job.output }}\nLogs: ${{ job.logs }} \nSteps: ${{ job.steps }} \nActions: ${{ job.actions }} \nServices: ${{ job.services }} \nEnvironment: ${{ job.environment}} \nClick here to see the full workflow details: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "attachments": [
                {
                  "pretext": "Deployment for ${{ github.repository }} has been cancelled",
                  "color": "990000",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Cancelled"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.STORM_BOT_SLACK_TOKEN }}
      - name: Send Discord notification - Deployment cancelled
        uses: Ilshidur/action-discord@master
        with:
          args:
            "Deployment for ${{ github.repository }} has been cancelled - #${{
            github.run_number }}"
        env:
          DISCORD_WEBHOOK: ${{ secrets.STORM_BOT_DISCORD_WEBHOOK }}
          DISCORD_USERNAME: ${{ env.STORM_BOT }}
          DISCORD_AVATAR: "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-stormie.png"
          DISCORD_EMBEDS:
            '[{"title": "Deployment #${{ github.run_number }} was cancelled",
            "description": "Deployment for ${{ github.repository }} was
            cancelled before it could complete normal execution - #${{
            github.run_number }}", "thumbnail": { "url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-fill.png"
            }, "image": { "url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/logo-fill.png"
            }, "author": { "name": "${{ github.actor }}", "url":
            "https://github.com/${{ github.actor }}", "icon_url":
            "https://avatars.githubusercontent.com/u/${{ github.actor_id }}?v=4"
            }, "fields": [ { "name": "Repository", "value": "${{
            github.repository }}" }, { "name": "Repository URL", "value": "${{
            github.repositoryUrl }}" }, { "name": "Pipeline Status", "value":
            "Cancelled" }, { "name": "Event", "value": "${{ github.event_name
            }}" }, { "name": "Result", "value": "${{ steps.release.result }}" },
            { "name": "Conclusion", "value": "${{ steps.release.conclusion }}"
            }, { "name": "Output", "value": "${{ toJSON(steps.release.outputs)
            }}" }], "color": 16565273, "timestamp": "${{
            github.event.repository.updated_at }}", "url": "${{
            github.event.pull_request.html_url || github.event.head_commit.url
            }}", "footer": { "text": "Click here to see the full workflow
            details: ${{ github.event.pull_request.html_url ||
            github.event.head_commit.url }}", "icon_url":
            "https://pub-761b436209f44a4d886487c917806c08.r2.dev/icon-fill.png"
            } }]'
      - name: Send Telegram notification - Deployment cancelled
        uses: storm-software/action-telegram-notify@main
        with:
          status: "cancelled"
        env:
          TELEGRAM_TOKEN: ${{ secrets.STORM_BOT_TELEGRAM_TOKEN }}
          TELEGRAM_CHAT: ${{ secrets.STORM_BOT_TELEGRAM_NOTIFICATION_CHAT }}
