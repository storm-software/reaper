use mise

### General env vars ###
export WORKSPACE_ROOT=$(pwd)
export JEMALLOC_SYS_WITH_MALLOC_CONF = "abort_conf:true,narenas:16"
export ESLINT_USE_FLAT_CONFIG = 1
export SHOULD_UNLOCK_GIT_CRYPT = 1

### Rust env vars ###
export RUST_LOG_FORMAT=devel # QE specific
export RUST_LOG=info
export RUST_BACKTRACE = 1
export RUSTFLAGS = "-Z unstable-options -D warnings"
export RUST_WITHOUT = "rust-docs"

### MISE env vars ###
export MISE_ENV = "prod"
export MISE_USE_TOML = 1

### Node env vars ###
export NODE_OPTIONS = "--trace-warnings --heapsnapshot-near-heap-limit=3 --max-old-space-size=4096 --heapsnapshot-signal=SIGTERM"
export NODE_ENV = "production"

### Nx env vars ###
export NX_CLOUD_NO_TIMEOUTS = 1
export NX_VERBOSE_LOGGING = 0

### Cloud env vars ###
export INFISICAL_ENVIRONMENT = "prod"
export HS_SERVICE_NAME = "@storm-software/reaper"

### Sentry env vars ###
export SENTRY_ORGANIZATION = "storm-software-org"
export SENTRY_PROPERTIES = "apps/eth-engine"

export PATH = "$HOME/.local/share/mise/shims:$PATH"

# Source the gitignored .envrc.local if it exists.
if test -f .envrc.local; then
    watch_file .envrc.local
    source .envrc.local
fi

# # Set up env vars and build inputs from flake.nix automatically for nix users.
# # If you don't use nix, you can safely ignore this.
# # You can set the DISABLE_NIX environment variable if you're in an environment
# # where nix is pre-installed (e.g. gitpod) but you don't want to use it.
# if command -v nix &> /dev/null && [ -z ${DISABLE_NIX+x} ]
# then
#     if nix flake metadata > /dev/null; then
#         watch_file tools/nix/shell.nix nix/all-engines.nix tools/nix/args.nix
#         use flake
#     fi
# fi
